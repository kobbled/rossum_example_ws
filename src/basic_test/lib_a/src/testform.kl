PROGRAM testform
%NOLOCKGROUP

TYPE
  mystruc = STRUCTURE
    byte_var1 : BYTE
    short_var : SHORT
  ENDSTRUCTURE

--must match from definition in .ftx file
%include form2.kl

--define form properties
%include testform.klt
%include klevkmsk.kl

CONST
  ER_WARN          = 0 -- warning no change in task execution
  ER_WARN_STP      = 1 -- pause all taks and stop all motion 
  ER_ABORT         = 2 -- abort all tasks and cancel
  SUCCESS          = 0 -- success constant
  EXISTS           = 7015 -- Already exists code
  MAX_DISP_LNG     = 40

VAR
  inact_array : ARRAY[20] OF BOOLEAN
  change_array : ARRAY[20] OF BOOLEAN
  term_char : INTEGER

VAR
  value_array : ARRAY[20] OF STRING[30]
  choices : ARRAY[5] OF STRING[12]
  b : BOOLEAN
  --form vars
  int_var1 : INTEGER
  int_var2 : INTEGER
  real_var : REAL
  bool_var : BOOLEAN
  str_var1 : STRING[20]
  str_var2 : STRING[12]
  struct_var : mystruc
  color_sel1 : INTEGER
  color_sel2 : INTEGER
  prog_name1 : STRING[12]
  prog_name2 : STRING[12]
  prog_name3 : STRING[12]
  prog_name4 : STRING[12]


--helper functions
ROUTINE forms_load(filename : STRING; dict_name : STRING) : BOOLEAN
  VAR
    status : INTEGER
  BEGIN
    --check if dictionary is loaded
    -- ** assume ele_number is always 0. This may not be true.
    CHECK_DICT(dict_name, 0, status)
    IF status <> 0 THEN
      --try to load .tx file from MF2 drive
      KCL('CD MF2:', status)
      KCL('LOAD FORM ' + filename, status)
      IF status <> 0 THEN
        POST_ERR(status, '', 0 , ER_ABORT)
        RETURN(FALSE)
      ENDIF
    ENDIF

    RETURN(TRUE)

  END forms_load

ROUTINE fshow(dict_name : STRING; ele_number : INTEGER; value_array : ARRAY OF STRING) : INTEGER
  VAR
    def_item : INTEGER
    status : INTEGER
  BEGIN
    def_item = 1
    DISCTRL_FORM (dict_name, ele_number, value_array, inact_array,
                change_array, kc_func_key, def_item, term_char, status)
    RETURN(status)
  END fshow

ROUTINE forms__show(dict_name : STRING; value_array : ARRAY OF STRING)
  VAR
    device_stat : INTEGER --tp_panel or crt_panel
    status, entry : INTEGER
  BEGIN
    --set to show to TP_PANEL
    device_stat = tp_panel
    FORCE_SPMENU(device_stat, SPI_TPUSER2, 1) -- forces the TP USER2

    --Displays form named FORM1
    -- ** assume ele_number is always 0. This may not be true.
    status = fshow(dict_name, 0, value_array)
    --status = fshow(dict_name, 0, BYNAME(prg_name, varlist_name, entry))

  END forms__show

-- populate array with variable mappings to form 
ROUTINE pop_varlist
  BEGIN
    value_array[1] = '['+prog_str+']int_var1'
    value_array[2] = '['+prog_str+']int_var2'
    value_array[3] = '['+prog_str+']real_var'
    value_array[4] = '['+prog_str+']bool_var'
    value_array[5] = '['+prog_str+']str_var1'
    value_array[6] = '['+prog_str+']str_var2'
    value_array[7] = '['+prog_str+']struct_var.byte_var1'
    value_array[8] = '['+prog_str+']struct_var.short_var'
    value_array[9] = 'din[1]'
    value_array[10] = 'ain[1]'
    value_array[11] = 'ain[1]'
    value_array[12] = 'aout[2]'
    value_array[13] = 'aout[2]'
    value_array[14] = '[*system*]$group[1].$termtype'
    value_array[15] = '['+prog_str+']color_sel1'
    value_array[16] = '['+prog_str+']color_sel2'
    value_array[17] = '['+prog_str+']prog_name1'
    value_array[18] = '['+prog_str+']prog_name2'
    value_array[19] = '['+prog_str+']prog_name3'
    value_array[20] = '['+prog_str+']prog_name4'
  END pop_varlist

--subwindow choices
ROUTINE pop_subwin
  BEGIN
    choices[1] = '' --not used
    choices[2] = 'Red'
    choices[3] = 'Blue'
    choices[4] = 'Green'
    choices[5] = 'Yellow'
  END pop_subwin

--intialized values for variables
ROUTINE init_vars
  BEGIN
    --initialize vars
    int_var1 = 12345
    --int_var2 uninit
    real_var  = 0
    bool_var = TRUE
    str_var1 = 'This is a test'
    --str_var2 uninit
    struct_var.byte_var1 = 10
    struct_var.short_var = 30
    color_sel1 = 3
    color_sel2 = 1
  END init_vars

BEGIN
  --populate array with variable names
  --of this program
  pop_varlist
  --subwindow choices are defined in array
  --choices
  pop_subwin
  --initialize variables
  init_vars

  --load form
  b = forms_load(dict_file, dict_str)

  --show form
  IF b THEN
    forms__show(dict_str, value_array)
  ELSE
    WRITE TPERROR(CR,'Form was not able to render.')
    ABORT
  ENDIF

END testform

